tosca_definitions_version: tosca_simple_yaml_1_0_0_wd03
description: TOSCA Apache Mesos & Aurora profile
template_name: mesos-types
template_version: 1.2.0-SNAPSHOT
template_author: FastConnect

imports:
  - "tosca-normative-types:1.0.0-SNAPSHOT"
  - "docker-engine:0.0.1-SNAPSHOT"

node_types:
  alien.nodes.MesosMaster:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      A Mesos master agent.
    tags:
      icon: /images/mesos_icon.png
    properties:
      firewall_rules:
        type: string
        required: false
      hooks:
        type: string
        required: false
        description: >
          A comma-separated list of hook modules to be installed inside master/slave.
      modules:
        type: string
        required: false
        description: >
          List of modules in a JSON-format to be loaded and be available to the internal subsystems.
      work_dir:
        type: string
        default: /var/lib/mesos
      log_dir:
        type: string
        default: "/var/log/mesos"
        required: false
      port:
        type: integer
        default: 5050
      cluster_name:
        type: string
        default: "Mesos cluster"
        required: false
    artifacts:
      - zoo_config: artifacts/zoo.cfg
        type: tosca.artifacts.File
    attributes:
      external_url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, port]] }
      master_url: { concat: ["zk://", get_operation_output: [SELF, Standard, configure, zk_endpoints], "/mesos"] }
      zk_endpoints: { get_operation_output: [SELF, Standard, configure, zk_endpoints] }
    capabilities:
      master: alien.capabilities.MesosMaster
    requirements:
      - host: tosca.nodes.Compute
        type: tosca.relationships.HostedOn
        lower_bound: 1
        upper_bound: 1
        node_filter:
          capabilities:
            - tosca.capabilities.OperatingSystem:
                properties:
                  - type: { equal: linux }
                  - architecture: { equal: x86_64 }
                  - distribution: { valid_values: [ debian, rhel, ubuntu, centos ] }
    interfaces:
      Standard:
        create:
          inputs:
            OS_DISTR: { get_property: [HOST, os, distribution] }
            OS_VERS: { get_property: [HOST, os, version] }
            IP: { get_attribute: [HOST, ip_address] }
            MESOS_VERSION: { get_property: [SELF, component_version] }
          implementation: scripts/install_mesos.sh
        configure:
          inputs:
            MESOS_CLUSTER: { get_property: [SELF, cluster_name] }
            MESOS_IP: { get_attribute: [HOST, ip_address] }
            MESOS_PORT: { get_property: [SELF, port] }
            MESOS_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
            MESOS_WORK_DIR: { get_property: [SELF, work_dir] }
            MESOS_LOG_DIR: { get_property: [SELF, log_dir] }
          implementation: scripts/master/configure.sh
        start:
          implementation: scripts/master/start.sh
        stop:
          implementation: scripts/master/stop.sh

  alien.nodes.MesosSlave:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      A Mesos slave agent.
    tags:
      icon: /images/mesos_icon.png
    properties:
      firewall_rules:
        type: string
        required: false
      hooks:
        type: string
        required: false
        description: >
          A comma-separated list of hook modules to be installed inside master/slave.
      modules:
        type: string
        required: false
        description: >
          List of modules in a JSON-format to be loaded and be available to the internal subsystems.
      log_dir:
        type: string
        default: "/var/log/mesos"
        required: false
      port:
        type: integer
        default: 5051
      attributes:
        type: string
        description: >
          Attributes of the slave machine, in the form: rack:2 or rack:2;u:1
        required: false
      isolation:
        type: string
        required: false
        constraints:
          - valid_values: [ "posix/cpu,posix/mem", "cgroups/cpu,cgroups/mem" ]
          # Todo extend to more values
      work_dir:
        type: string
        required: false
        default: "/var/lib/mesos"
    interfaces:
      Standard:
        create:
          inputs:
            OS_DISTR: { get_property: [HOST, os, distribution] }
            OS_VERS: { get_property: [HOST, os, version] }
            IP: { get_attribute: [HOST, ip_address] }
            MESOS_VERSION: { get_property: [SELF, component_version] }
          implementation: scripts/install_mesos.sh
        configure:
          inputs:
            MESOS_IP: { get_attribute: [HOST, ip_address] }
            MESOS_PORT: { get_property: [SELF, port] }
            MESOS_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
            MESOS_LOG_DIR: { get_property: [SELF, log_dir] }
            MESOS_WORK_DIR: { get_property: [SELF, work_dir] }
          implementation: scripts/slave/configure.sh
        start:
          implementation: scripts/slave/start.sh
        stop:
          implementation: scripts/slave/stop.sh
    capabilities:
      slave: alien.capabilities.MesosSlave
    requirements:
      - host: tosca.nodes.Compute
        type: tosca.relationships.HostedOn
        lower_bound: 1
        upper_bound: 1
        node_filter:
          capabilities:
            - tosca.capabilities.OperatingSystem:
                properties:
                  - type: { equal: linux }
                  - architecture: { equal: x86_64 }
                  - distribution: { valid_values: [ debian, rhel, ubuntu, centos ] }
      - master: alien.capabilities.MesosMaster
        type: alien.relationships.MesosSlaveConnectsToMaster
        lower_bound: 1
        upper_bound: 1
      - docker_host: alien.capabilities.DockerHost
        type: alien.relationships.MesosSlaveDependsOnDocker
        lower_bound: 0
        upper_bound: 1

  alien.nodes.AuroraScheduler:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Aurora Scheduler
    tags:
      icon: images/aurora_icon.png
    properties:
      cluster_name:
        type: string
        required: true
        default: devcluster
    attributes:
      external_url: { concat: [ "http://", get_attribute: [HOST, public_ip_address], ":8081/scheduler"] }
    requirements:
      - host: alien.capabilities.MesosMaster
        type: alien.relationships.AuroraSchedulerHostedOnMaster
        lower_bound: 1
        upper_bound: 1
        node_filter:
          properties:
            - component_version: { equal: 0.25.0-0.2.70 }
      # TODO: requirement 0-1 vers un ensemble ZOOKEEPER
      # & config -thermos_executor_flags="--announcer-ensemble localhost:2181 --announcer-zookeeper-auth-config /home/vagrant/aurora/examples/vagrant/config/announcer-auth.json"

    interfaces:
      Standard:
        create:
          inputs:
            OS: { get_property: [HOST, os, distribution] }
          implementation: scripts/aurora/install_scheduler.sh
        configure:
          inputs:
            AURORA_ZK_ENDPOINTS: { get_attribute: [HOST, zk_endpoints] }
            AURORA_MESOS_MASTER: { get_attribute: [HOST, master_url] }
            AURORA_CLUSTER_NAME: { get_property: [SELF, cluster_name] }
            HOSTNAME: { get_attribute: [HOST, public_ip_address] }
          implementation: scripts/aurora/configure_scheduler.sh
        start:
          inputs:
            OS: { get_property: [HOST, os, distribution] }
          implementation: scripts/aurora/start_scheduler.sh
        stop:
          inputs:
            OS: { get_property: [HOST, os, distribution] }
          implementation: scripts/aurora/stop_scheduler.sh

  alien.nodes.Marathon:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Marathon scheduler. NB: This component requires Oracle's Java 8. The Oracle licence is therefore implicitly accepted. The licence can be found here: http://www.oracle.com/technetwork/java/javase/downloads/thirdpartylicensereadme-java8-2168078.txt.
    tags:
      icon: images/marathon_icon.png
    attributes:
      external_url: { concat: [ "http://", get_attribute: [HOST, public_ip_address], ":8080/ui"] }
    requirements:
      - host: alien.capabilities.MesosMaster
        type: alien.relationships.MarathonHostedOnMaster
        lower_bound: 1
        upper_bound: 1
    interfaces:
      Standard:
        create:
          inputs:
            OS: { get_property: [HOST, os, distribution] }
          implementation: scripts/marathon/install.sh
        start:
          inputs:
            MARATHON_MASTER: { get_attribute: [HOST, master_url] }
            MARATHON_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
            MARATHON_ZK: { concat: [ "zk://", get_attribute: [HOST, zk_endpoints], "/marathon" ] }
          implementation: scripts/marathon/start.sh
        stop: scripts/marathon/stop.sh

  alien.nodes.AuroraExecutor:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Aurora Executor
    tags:
      icon: images/aurora_icon.png
    requirements:
      - host: alien.capabilities.MesosSlave
        type: alien.relationships.AuroraExecutorHostedOnSlave
        lower_bound: 1
        upper_bound: 1
        node_filter:
          properties:
            - component_version: { equal: 0.25.0-0.2.70 }
    interfaces:
      Standard:
        create:
          inputs:
            OS: { get_property: [HOST, os, distribution] }
          implementation: scripts/aurora/install_executor.sh
        configure:
          inputs:
            MESOS_WORK_DIR: { get_property: [HOST, work_dir] }
          implementation: scripts/aurora/configure_executor.sh

capability_types:
  alien.capabilities.MesosMaster:
    derived_from: tosca.capabilities.Root
  alien.capabilities.MesosSlave:
    derived_from: tosca.capabilities.Root

relationship_types:
  alien.relationships.MarathonHostedOnMaster:
    derived_from: tosca.relationships.HostedOn
    description: Relationship used to bind the Marathon scheduler to a Mesos Master
    valid_sources: [ alien.nodes.Marathon ]
    valid_targets: [ alien.capabilities.MesosMaster ]
  alien.relationships.AuroraSchedulerHostedOnMaster:
    derived_from: tosca.relationships.HostedOn
    description: Relationship used to bind the Aurora scheduler to a Mesos Master
    valid_sources: [ alien.nodes.AuroraScheduler ]
    valid_targets: [ alien.capabilities.MesosMaster ]
  alien.relationships.AuroraExecutorHostedOnSlave:
    derived_from: tosca.relationships.HostedOn
    description: Relationship used to bind Thermos, the Aurora executor, to a mesos worker
    valid_sources: [ alien.nodes.AuroraExecutor ]
    valid_targets: [ alien.nodes.MesosSlave ]
  alien.relationships.MesosSlaveConnectsToMaster:
    derived_from: tosca.relationships.ConnectsTo
    description: Relationship used to bind a slave to a master
    valid_sources: [ alien.nodes.MesosSlaves ]
    valid_targets: [ alien.capabilities.MesosMaster ]
    interfaces:
      Configure:
        post_configure_source:
          inputs:
            MESOS_MASTER: { get_attribute: [TARGET, master_url] }
          implementation: scripts/slave/configure_connectsToMaster.sh
  alien.relationships.MesosSlaveDependsOnDocker:
      derived_from: tosca.relationships.DependsOn
      description: Relationship used to bind a Mesos slave to a Docker engine
      valid_sources: [ alien.nodes.MesosSlave ]
      valid_targets: [ alien.capabilities.DockerHost ]
      interfaces:
          Configure:
            post_configure_source: scripts/slave/configure_dependsOnDocker.sh
