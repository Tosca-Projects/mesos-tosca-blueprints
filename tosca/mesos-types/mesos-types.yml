tosca_definitions_version: tosca_simple_yaml_1_0_0_wd03
description: TOSCA simple profile with Mesos
template_name: mesos-types
template_version: 0.2.0-SNAPSHOT
template_author: FastConnect

imports:
  - "tosca-normative-types:1.0.0-SNAPSHOT"

node_types:
  alien.nodes.MesosBase:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      A Mesos base node. This component defines common properties and install scripts for a Mesos base,
      which is used to host Mesos Agents, eg. a Mesos master or a Mesos slave. It currently supports
      REHL, Centos, Ubuntu and Debian distributions.
    tags:
      icon: images/icon.svg
    properties:
      version:
        type: string
        required: false
      firewall_rules:
        type: string
        required: false
      hooks:
        type: string
        required: false
        description: >
          A comma-separated list of hook modules to be installed inside master/slave.
      modules:
        type: string
        required: false
        description: >
          List of modules in a JSON-format to be loaded and be available to the internal subsystems.
    interfaces:
      Standard:
        create:
          inputs:
            LINUX_DISTR: { get_property: [HOST, os, distribution] }
            LINUX_VERS: { get_property: [HOST, os, version] }
            MESOS_VERSION: { get_property: [SELF, version] }
          implementation: scripts/install_mesos.sh
    capabilities:
      host: alien.capabilities.MesosContainer
    requirements:
      - host: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn
        lower_bound: 1
        upper_bound: 1
        node_filter:
          capabilities:
            - tosca.capabilities.OperatingSystem:
                properties:
                  - type: { equal: linux }
                  - architecture: { equal: x86_64 }
                  - distribution: { valid_values: [ debian, rhel, ubuntu, centos ] }

  alien.nodes.MesosAgent:
    abstract: true
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      An abstract Mesos agent.
    properties:
      log_dir:
        type: string
        required: false
    requirements:
      - host: alien.capabilities.MesosContainer
        relationship: tosca.relationships.HostedOn

  alien.nodes.MesosMaster:
    derived_from: alien.nodes.MesosAgent
    description: >
      A Mesos master agent.
    properties:
      work_dir:
        type: string
        default: /var/lib/mesos
      quorum:
        type: integer
        default: 1
        # Todo : Can we get this programatically ?
      port:
        type: integer
        default: 5050
      zk:
        type: string
        description: >
          ZooKeeper URL (used for leader election amongst masters) May be one of:
           - zk://host1:port1,host2:port2,.../path
           - zk://username:password@host1:port1,host2:port2,.../path
           - file:///path/to/file (where file contains one of the above)
          NOTE: Not required if master is run in standalone mode (non-HA).
        required: false
      cluster_name:
        type: string
        default: "Mesos cluster"
        required: false
    attributes:
      external_url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, port]] }
      master_url: { concat: [get_attribute: [HOST, ip_address], ":", get_property: [SELF, port]] }
      # Todo : master_url: { get_operation_output: [CONFIGURE...] } - to retrieve zookeeper url
    interfaces:
      Standard:
       # Todo : do we need a configure operation ?
        configure:
          inputs:
            MESOS_CLUSTER: { get_property: [SELF, cluster_name] }
            MESOS_IP: { get_attribute: [HOST, ip_address] }
            MESOS_PORT: { get_property: [SELF, port] }
            MESOS_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
            MESOS_WORK_DIR: { get_property: [SELF, work_dir] }
            MESOS_LOG_DIR: { get_property: [SELF, log_dir] }
            #MESOS_ADVERTISE_IP: { get_attribute: [HOST, public_ip_address] }
            #MESOS_ADVERTISE_PORT: { get_property: [SELF, port] }
          implementation: scripts/generate_env_file.sh
        start:
          implementation: scripts/start_master_SA.sh

  alien.nodes.MesosSlave:
    derived_from: alien.nodes.MesosAgent
    description: >
      A Mesos slave agent.
    properties:
      port:
        type: integer
        default: 5051
      attributes:
        type: string
        description: >
          Attributes of the slave machine, in the form: rack:2 or rack:2;u:1
        required: false
      isolation:
        type: string
        required: false
        constraints:
          - valid_values: [ "posix/cpu,posix/mem", "cgroups/cpu,cgroups/mem" ]
          # Todo extend to more values
    interfaces:
      Standard:
        configure:
          inputs:
            MESOS_IP: { get_attribute: [HOST, ip_address] }
            MESOS_PORT: { get_property: [SELF, port] }
            MESOS_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
  #          MESOS_ADVERTISE_IP: { get_attribute: [HOST, public_ip_address] }
  #          MESOS_ADVERTISE_PORT: { get_property: [HOST, port] }
            MESOS_LOG_DIR: { get_property: [SELF, log_dir] }
          implementation: scripts/generate_env_file.sh

    requirements:
      - master: alien.capabilities.MesosMaster
        relationship: alien.relationships.MesosSlaveDependsOnMaster
        lower_bound: 1

capability_types:
  alien.capabilities.MesosContainer:
    derived_from: tosca.capabilities.Container
  alien.capabilities.MesosMaster:
    derived_from: tosca.capabilities.Node
relationship_types:
  alien.relationships.MesosSlaveDependsOnMaster:
    derived_from: tosca.relationships.DependsOn
    description: Relationship used to bind a slave to a master
    valid_source_types: [ alien.nodes.MesosSlaves ]
    valid_target_types: [ alien.capabilities.MesosMaster ]
    interfaces:
      Configure:
        add_target:
          inputs:
            # MESOS_MASTER: { concat: [ get_attribute: [TARGET, ip_address], ":", get_property: [TARGET, port]] }
            MESOS_MASTER: { get_attribute: [TARGET, master_url] }
          implementation: scripts/start_slave.sh



