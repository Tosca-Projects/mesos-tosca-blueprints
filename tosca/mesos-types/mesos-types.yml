tosca_definitions_version: tosca_simple_yaml_1_0_0_wd03
description: TOSCA simple profile with Mesos
template_name: mesos-types
template_version: 1.1.0-SNAPSHOT
template_author: FastConnect

imports:
  - "tosca-normative-types:1.0.0-SNAPSHOT"

node_types:
  alien.nodes.MesosMaster:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      A Mesos master agent.
    tags:
      icon: /images/icon.png
    properties:
      version:
        type: string
        required: false
      firewall_rules:
        type: string
        required: false
      hooks:
        type: string
        required: false
        description: >
          A comma-separated list of hook modules to be installed inside master/slave.
      modules:
        type: string
        required: false
        description: >
          List of modules in a JSON-format to be loaded and be available to the internal subsystems.
      work_dir:
        type: string
        default: /var/lib/mesos
      log_dir:
        type: string
        default: "/var/log/mesos"
        required: false
      port:
        type: integer
        default: 5050
      cluster_name:
        type: string
        default: "Mesos cluster"
        required: false
    attributes:
      external_url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, port]] }
      master_url: { get_operation_output: [SELF, Standard, start, master_url] }
    capabilities:
      master: alien.capabilities.MesosMaster
    requirements:
      - host: tosca.nodes.Compute
        type: tosca.relationships.HostedOn
        lower_bound: 1
        upper_bound: 1
        node_filter:
          capabilities:
            - tosca.capabilities.OperatingSystem:
                properties:
                  - type: { equal: linux }
                  - architecture: { equal: x86_64 }
                  - distribution: { valid_values: [ debian, rhel, ubuntu, centos ] }
    interfaces:
      Standard:
        create:
          inputs:
            OS_DISTR: { get_property: [HOST, os, distribution] }
            OS_VERS: { get_property: [HOST, os, version] }
            MESOS_VERSION: { get_property: [SELF, version] }
          implementation: scripts/base/install_mesos.sh
        configure:
          inputs:
            MESOS_CLUSTER: { get_property: [SELF, cluster_name] }
            MESOS_IP: { get_attribute: [HOST, ip_address] }
            MESOS_PORT: { get_property: [SELF, port] }
            MESOS_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
            MESOS_WORK_DIR: { get_property: [SELF, work_dir] }
            MESOS_LOG_DIR: { get_property: [SELF, log_dir] }
          implementation: scripts/base/configure.sh
        start:
          inputs:
            IP: { get_attribute: [HOST, ip_address] }
          implementation: scripts/master/start.sh
        stop:
          implementation: scripts/master/stop.sh

  alien.nodes.MesosSlave:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      A Mesos slave agent.
    properties:
      version:
        type: string
        required: false
      firewall_rules:
        type: string
        required: false
      hooks:
        type: string
        required: false
        description: >
          A comma-separated list of hook modules to be installed inside master/slave.
      modules:
        type: string
        required: false
        description: >
          List of modules in a JSON-format to be loaded and be available to the internal subsystems.
      log_dir:
        type: string
        default: "/var/log/mesos"
        required: false
      port:
        type: integer
        default: 5051
      attributes:
        type: string
        description: >
          Attributes of the slave machine, in the form: rack:2 or rack:2;u:1
        required: false
      isolation:
        type: string
        required: false
        constraints:
          - valid_values: [ "posix/cpu,posix/mem", "cgroups/cpu,cgroups/mem" ]
          # Todo extend to more values
      containerizers:
        type: string
        required: false
        description: >
          Comma-separated list of containerizer implementations to compose in order to provide containerization.
          Available options are mesos, external, and docker (on Linux).
          The order the containerizers are specified is the order they are tried. (default: mesos)
    interfaces:
      Standard:
        create:
          inputs:
            OS_DISTR: { get_property: [HOST, os, distribution] }
            OS_VERS: { get_property: [HOST, os, version] }
            MESOS_VERSION: { get_property: [SELF, version] }
          implementation: scripts/base/install_mesos.sh
        configure:
          inputs:
            MESOS_IP: { get_attribute: [HOST, ip_address] }
            MESOS_PORT: { get_property: [SELF, port] }
            MESOS_HOSTNAME: { get_attribute: [HOST, public_ip_address] }
            MESOS_CONTAINERIZERS: { get_property: [SELF, containerizers] }
            MESOS_LOG_DIR: { get_property: [SELF, log_dir] }
          implementation: scripts/base/configure.sh
        stop:
          implementation: scripts/slave/stop.sh
    requirements:
      - host: tosca.nodes.Compute
        type: tosca.relationships.HostedOn
        lower_bound: 1
        upper_bound: 1
        node_filter:
          capabilities:
            - tosca.capabilities.OperatingSystem:
                properties:
                  - type: { equal: linux }
                  - architecture: { equal: x86_64 }
                  - distribution: { valid_values: [ debian, rhel, ubuntu, centos ] }
      - master: alien.capabilities.MesosMaster
        type: alien.relationships.MesosSlaveConnectsToMaster
        lower_bound: 1
        upper_bound: 1

capability_types:
  alien.capabilities.MesosContainer:
    derived_from: tosca.capabilities.Container
  alien.capabilities.MesosMaster:
    derived_from: tosca.capabilities.Endpoint

relationship_types:
  alien.relationships.MesosSlaveConnectsToMaster:
    derived_from: tosca.relationships.ConnectsTo
    description: Relationship used to bind a slave to a master
    valid_sources: [ alien.nodes.MesosSlaves ]
    valid_targets: [ alien.capabilities.MesosMaster ]
    interfaces:
      Configure:
        add_target:
          inputs:
            MESOS_MASTER: { get_attribute: [TARGET, master_url] }
          implementation: scripts/slave/start.sh



